debug: false # 로그 백이 디버그 로고를 찍을 수 있게끔 해주지만 여기에서 false
management:
  endpoints:
    web:
      exposure:
        include: "*" # actuator의 endpoint중에 감춰져 있는 녀석을 모두 활성화

logging:
  level:
    com.fastcampus.projectboard: debug # 프로젝트에서 발생하는 모든 로그들은 디버그 레벨로 보겠다
    org.springframework.web.servlet: debug # 얘 덕분에 리퀘스트 리스폰스 로그가 어떤 패키지로부터 오는지 조사해서 알 수 있음. 그래서 request, response 로그만 디버그로 따로 뽑아봄
    org.hibernate.type.descriptor.sql.BasicBinder: trace # JPA 사용할 때 query log를 디버그 로그로 관찰할 수 있는데 바인딩 파라미터들은 다 물음표로 나오게됨. 그걸 관찰할 수 있게 해줌

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/board
    username: biglol
    password: 1234
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    defer-datasource-initialization: true # test용 db 데이터를 만들 수 있게끔 생성할 수 있게끔 함 (data.sql)
    hibernate.ddl-auto: create # entity를 보고 테이블 데이터를 유추해서 자동으로 ddl문을 만들어줌
    show-sql: true
    properties: # spring은 hibernate의 모든 기능을 보장하게끔 만들어져 있는건 아님. hibernate에서만 전용으로 사용할 수 있는 복잡한 property를 쓰고 싶은 경우 properties 지정
      hibernate.format_sql: true # 한줄로 나오는 쿼리문을 포멧팅 해줌
      hibernate.default_batch_fetch_size: 100 # jpa에서 복잡한 쿼리, 연관관계가 매핑되어 있는 쿼리를 사용하게 될 때 한번에 bulk로 select해올 수 있게끔 만들어줌. n+1쿼리 문제 해결
  h2.console.enabled: true
  sql.init.mode: always # 테스트하는 기간만큼은 실제 DB를 띄우고 볼 때에도 테스트 데이터를 밀어 넣게끔 함. 서버 시작할 때마다 넣음
  data.rest:
    base-path: /api # rest api의 기본 경로를 /api로 설정
    detection-strategy: annotated # @RepositoryRestResource를 사용해서 rest api를 만들 수 있음

---

#spring:
#  config:
#    activate:
#      on-profile: testdb # 특정 profile에 해당하는 도큐먼트. testdb 프로파일이 activate 되었을 때 이 문서를 읽어라
#  datasource:
#    url: jdbc:h2:mem:board;mode=mysql
#    driver-class-name: org.h2.Driver
#  sql.init.mode: always
#  test.database.replace: none






# Rest-data
# The detection-strategy: annotated line is setting the strategy that Spring Data REST will use to detect repository resources. In this case, it's set to annotated, which means that only repositories annotated with @RepositoryRestResource will be exposed over REST