plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.diffplug.spotless' version '6.23.3' // Spotless 플러그인, ./gradlew spotlessApply
}

// querydsl을 plugin으로 세팅하는 경우가 있는데 스프링부트 2 초반대 버전까지만 쓰이고 gradle이랑 충돌나서 제거

//id 'org.springframework.boot' version '3.2.2'
//id 'io.spring.dependency-management' version '1.1.4'

group = 'get-in-line'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

// https://nsmchan.tistory.com/17 (window 한글 깨짐 현상)
compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

spotless {
	java {
		// Google Java 포맷 적용
		/*
            googleJavaFormat() : 탭은 2개의 공백
            googleJavaFormat().aosp() : 탭은 4개의 공백
            [참고] https://github.com/google/google-java-format/issues/525
         */
		googleJavaFormat().aosp()
		// 아래 순서로 import문 정렬
		importOrder('java', 'javax', 'jakarta', 'org', 'com')
		// 사용하지 않는 import 제거
		removeUnusedImports()
		// 각 라인 끝에 있는 공백을 제거
		trimTrailingWhitespace()
		// 파일 끝에 새로운 라인 추가
		endWithNewline()
	}
}

dependencies {
	developmentOnly 'org.springframework.boot:spring-boot-devtools' // automatic restart (소스 변경 후 ctrl+f9), live reload (재시작 안하고 싶으면 빌드를 gradle이 아닌 intellij로 위임)
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.data:spring-data-rest-hal-explorer'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	testImplementation 'org.springframework.security:spring-security-test'

	//Querydsl 추가
	// ⭐ Spring boot 3.x이상에서 QueryDsl 패키지를 정의하는 방법, https://velog.io/@juhyeon1114/Spring-QueryDsl-gradle-%EC%84%A4%EC%A0%95-Spring-boot-3.0-%EC%9D%B4%EC%83%81
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta' // com.querydsl:querydsl-jpa만 적어도 dependency-management에 의해 가장 최신의 버전이 붙음.
//	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta" // 얘의 경우 어절 수 없이 수동 설정해야 되는 부분. 다만 정말로 수동으로 하지는 않고 변수로 씀. 그루비 문법 중 하나임
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

tasks.named('test') {
	useJUnitPlatform()
}

// querydsl 적용. 안해도 되지만 하는 이유 설명: fastcampus.co.kr/courses/209686/clips (14분전)
// Q 클래스가 만들엉진 위치를 수동으로 잡음. 수동으로 잡은 위치를 IDE가 모르니 아래 코드 작성
def generated='src/main/generated'

// java source set 에 querydsl QClass 위치 추가.
sourceSets {
	main.java.srcDirs += [ generated ]
}

// querydsl QClass 파일 위치를 잡아주는 설정. 파일 위치 직접 설정. 그럼 자바 코드가 src/main/generated에 생김
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// gradle clean 시에 QClass 디렉토리 삭제. 원래 build에 있어야 하는데 src안의 generated안에 넣었기에 clean할 때 자동으로 지워지지 않음. 그래서 아래 코드 추가
clean {
	delete file(generated)
}