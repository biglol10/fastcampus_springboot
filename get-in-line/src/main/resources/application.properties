debug=false
management.endpoints.web.exposure.include=*
server.error.whitelabel.enabled=false

# Logging
logging.level.com.biglol.getinline=debug
logging.level.org.springframework.web.servlet=debug
# # Enable detailed SQL logging to trace each bound parameter value in SQL statements
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace
# spring boot 3.0 ????? ?? ??
logging.level.org.hibernate.orm.jdbc.bind=trace

# View
spring.thymeleaf.cache=false
spring.thymeleaf3.decoupled-logic=true

# Database
# Delay database schema initialization by Hibernate until after EntityManagerFactory beans are created, set to true
spring.jpa.defer-datasource-initialization=true
# Specifies the action to perform on the database schema based on entity definitions
# production??? none
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
# When show-sql is enabled, format_sql beautifies the SQL log output
spring.jpa.properties.hibernate.format_sql=true

# If false, disables the H2 console; useful for development, set to true or false based on environment
spring.h2.console.enabled=false
# Optimize select queries by batching 'in' query parameters. For example, batch 'in' query IDs in groups of 100
spring.jpa.properties.hibernate.default_batch_fetch_size=100
#spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.url=jdbc:mysql://localhost:3306/getinline
spring.datasource.username=root
# simplepw or 1234
spring.datasource.password=simplepw
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# pageing control (default 20) ??? url?? ?size=3&page=5 ?? ?
spring.data.web.pageable.default-page-size=20
# For in-memory databases, initialize the schema and data every time the application starts
spring.sql.init.mode=always

## API
spring.data.rest.base-path=/api

# ? restart ?? ?? class path? ??? ? ??? ? ? ??? ???? ???? ???? class? ??? ???? ????? ??, ?? ??? ???? ?? ? ????? ??? ?? ??? ???? ?? ????? ??. Springboot start? 2? ?? ?? ??
spring.devtools.restart.quiet-period=700ms

## --- develop ??
#spring.config.activate.on-profile=develop

# Enables lazy initialization to speed up startup time, but may increase latency on the first call to each component (affects API response times initially)
# This explanation suggests that enabling spring.main.lazy-initialization=true can make the application start faster by not initializing all beans at startup. Instead, beans are initialized on demand, which can be beneficial during development to reduce startup time. However, this might lead to increased latency the first time a particular bean is accessed, as it would then need to be initialized.
#spring.main.lazy-initialization=true